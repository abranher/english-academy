// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users Models

model User {
  id              String        @id @default(uuid())
  role            Roles         @default(STUDENT)
  name            String
  secondName      String?
  lastName        String
  secondLastName  String?
  username        String        @unique
  email           String        @unique
  emailVerifiedAt DateTime?
  password        String
  birthdate       DateTime?
  avatarUrl       String?
  accountStatus   AccountStatus @default(ACTIVE)
  lastConnection  DateTime?
  secretToken     String?
  profileComplete Boolean       @default(false)
  country         Country?      @relation(fields: [countryId], references: [id])
  countryId       String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Student         Student[]
  Tutor           Tutor[]

  @@index([username, email])
}

model Student {
  id      String @id @default(uuid())
  userId  String
  levelId String
  User    User   @relation(fields: [userId], references: [id])
  Level   Level  @relation(fields: [levelId], references: [id])
}

model Tutor {
  id             String          @id @default(uuid())
  userId         String
  biography      String?
  approvedAt     DateTime?
  location       String
  certifications Certification[]
  curriculumUrl  String
  User           User            @relation(fields: [userId], references: [id])
}

model Certification {
  id            String   @id @default(uuid())
  tutorId       String
  title         String
  certification String
  institution   String
  issueDate     DateTime
  language      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Tutor         Tutor    @relation(fields: [tutorId], references: [id])
}

model Country {
  id   String @id @default(uuid())
  name String
  code String @unique
  User User[]
}

// curriculum models

// Modelo de Nivel
model Level {
  id          String    @id @default(uuid())
  levelCode   String    @unique
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  courses     Course[]
  Student     Student[]
}

// Modelo de Curso
model Course {
  id          String       @id @default(uuid())
  levelId     String
  name        String
  description String
  price       Float
  status      CourseStatus
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Level       Level        @relation(fields: [levelId], references: [id])
  lessons     Lesson[]
}

// Modelo de Lecci√≥n
model Lesson {
  id        String       @id @default(uuid())
  courseId  String
  status    LessonStatus
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  Course    Course       @relation(fields: [courseId], references: [id])
}

enum Roles {
  ADMIN
  STUDENT
  TUTOR
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DELETED
}

enum LessonStatus {
  DRAFT
  PUBLISHED
  REVIEWED
  ARCHIVED
  DELETED
}
