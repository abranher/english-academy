// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// *
// * Infrastructure models
// *

// *
// * Bank
// *

model Bank {
  id   String @id @default(uuid())
  code String @unique
  name String

  mobilePayments MobilePayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PhoneCode {
  VE_0412
  VE_0414
  VE_0416
  VE_0424
  VE_0426
}

enum DocumentType {
  V
  J
  E
}

// *
// * PhoneCode
// *

model MobilePayment {
  id String @id @default(uuid())

  phoneCode   PhoneCode
  phoneNumber Int

  documentType   DocumentType
  documentNumber Int

  bankId String
  bank   Bank   @relation(fields: [bankId], references: [id])

  tutor Tutor?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([phoneCode, phoneNumber])
  @@unique([documentType, documentNumber])
}

// *
// * Subscription Plans
// *

enum BillingCycle {
  MONTHLY
  ANNUAL
}

model Plan {
  id           String       @id @default(uuid())
  name         String
  description  String?
  price        Float
  billingCycle BillingCycle
  isActive     Boolean      @default(true)

  // Features
  maxCourses Int? // Null -> ilimitado

  subscriptionOrders SubscriptionOrder[]
  subscriptions      Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, billingCycle])
}

// *
// * Subscription
// *

enum SubscriptionOrderStatus {
  UNVERIFIED
  NEEDS_REVISION // El administrador solicitó cambios
  RESUBMITTED // El tutor reenvio
  COMPLETED
  CANCELED
}

model SubscriptionOrder {
  id                String                  @id @default(uuid())
  status            SubscriptionOrderStatus @default(UNVERIFIED)
  subscriptionPrice Float
  paymentMethod     PaymentMethod           @default(MOBILE_PAYMENT)
  paymentReference  Int

  tutorId String
  tutor   Tutor  @relation(fields: [tutorId], references: [id])

  planId String
  plan   Plan   @relation(fields: [planId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tutorId])
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  PENDING // Pendiente de aprobación
}

model Subscription {
  id        String             @id @default(uuid())
  startDate DateTime?
  endDate   DateTime?
  status    SubscriptionStatus @default(PENDING)

  tutorId String @unique
  tutor   Tutor  @relation(fields: [tutorId], references: [id])

  planId String
  plan   Plan   @relation(fields: [planId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// *
// * Users models
// *

// *
// * User
// *

enum Roles {
  ADMIN
  STUDENT
  TUTOR
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

model User {
  id              String        @id @default(uuid())
  role            Roles         @default(STUDENT)
  name            String?
  lastName        String?
  username        String?       @unique
  email           String        @unique
  emailVerifiedAt DateTime?
  password        String?
  birth           DateTime?
  avatarUrl       String?
  accountStatus   AccountStatus @default(ACTIVE)
  profileComplete Boolean       @default(false)

  countryId String?
  country   Country? @relation(fields: [countryId], references: [id])

  student Student?
  tutor   Tutor?

  activitylogs  ActivityLog[]
  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([username, email])
}

// *
// * Student
// *

model Student {
  id            String    @id @default(uuid())
  bio           String?
  initialTestAt DateTime?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  levelId String?
  level   Level?  @relation(fields: [levelId], references: [id])

  enrollments            CourseEnrollment[]
  courseEnrollmentOrders CourseEnrollmentOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// *
// * Tutor
// *

enum TutorStatus {
  NEW
  PENDING
  RESUBMITTED
  APPROVED
  REJECTED
}

model Tutor {
  id         String      @id @default(uuid())
  bio        String?
  cvUrl      String?
  status     TutorStatus @default(NEW)
  approvedAt DateTime?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  mobilePaymentId String?        @unique
  mobilePayment   MobilePayment? @relation(fields: [mobilePaymentId], references: [id])

  subscription Subscription?

  certifications     Certification[]
  tutorStatusHistory TutorStatusHistory[]
  attachments        Attachment[]
  subscriptionOrders SubscriptionOrder[]
  courses            Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// *
// * Tutor Status History
// *

enum TutorStatusDecision {
  APPROVED
  NEEDS_CHANGES
  REJECTED
}

model TutorStatusHistory {
  id             String              @id @default(uuid())
  comment        String
  previousStatus TutorStatus
  decision       TutorStatusDecision
  resubmittedAt  DateTime?

  tutorId String
  tutor   Tutor  @relation(fields: [tutorId], references: [id])

  createdAt DateTime @default(now())
}

// *
// * Certification
// *

model Certification {
  id                  String @id @default(uuid())
  name                String
  issuingOrganization String
  url                 String

  tutorId String
  tutor   Tutor  @relation(fields: [tutorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// *
// * Country
// *

model Country {
  id   String @id @default(uuid())
  name String
  code String @unique

  user User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// *
// * Level
// *

model Level {
  id          String @id @default(uuid())
  levelCode   String @unique
  title       String
  description String

  courses Course[]
  student Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// *
// * Category
// *

model Category {
  id          String @id @default(uuid())
  title       String
  description String

  subCategories SubCategory[]
  courses       Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// *
// * SubCategory
// *

model SubCategory {
  id          String @id @default(uuid())
  title       String
  description String

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// *
// * Price
// *

model Price {
  id     String @id @default(uuid())
  amount Float

  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// *
// * Courses
// *

enum CourseReviewStatus {
  DRAFT // El tutor está trabajando en el curso
  PENDING_REVIEW // El tutor envió el curso para revisión
  APPROVED // El administrador aprobó el curso
  NEEDS_REVISION // El administrador solicitó cambios
  REJECTED // El administrador rechazó el curso
}

enum CoursePlatformStatus {
  DRAFT // El curso está en borrador (no visible)
  PUBLISHED // El curso está disponible para los estudiantes
  ARCHIVED // El curso ya no está activo pero se conserva
  DELETED // El curso fue eliminado (soft delete)
}

model Course {
  id                 String               @id @default(uuid())
  title              String               @db.Text
  subtitle           String?              @db.Text
  description        String?              @db.Text
  requirements       String?              @db.Text
  learningObjectives String?              @db.Text
  image              String?              @db.Text
  trailer            String?              @db.Text
  reviewStatus       CourseReviewStatus   @default(DRAFT)
  platformStatus     CoursePlatformStatus @default(DRAFT)
  publishedAt        DateTime?

  tutorId String
  tutor   Tutor  @relation(fields: [tutorId], references: [id])

  priceId String?
  price   Price?  @relation(fields: [priceId], references: [id])

  levelId String?
  level   Level?  @relation(fields: [levelId], references: [id])

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  subcategoryId String?
  subcategory   SubCategory? @relation(fields: [subcategoryId], references: [id])

  chapters    Chapter[]
  enrollments CourseEnrollment[]
  reviews     CourseReview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// *
// * CourseReview
// *

enum CourseReviewDecision {
  APPROVED // El curso fue aprobado
  NEEDS_CHANGES // El curso necesita cambios
  REJECTED // El curso fue rechazado
}

model CourseReview {
  id         String                @id @default(uuid())
  feedback   String?
  decision   CourseReviewDecision?
  reviewedAt DateTime?

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// *
// * Course chapter
// *

model Chapter {
  id                 String  @id @default(uuid())
  title              String
  description        String? @db.Text
  learningObjectives String? @db.Text
  position           Int

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  lessons         Lesson[]
  studentProgress StudentProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

// *
// * Chapter lesson
// *

enum LessonType {
  CLASS
  QUIZ
}

model Lesson {
  id       String     @id @default(uuid())
  type     LessonType
  position Int

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  class Class?
  quiz  Quiz?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// *
// * Lesson class
// *

model Class {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  video       String? @db.Text

  lessonId String @unique
  lesson   Lesson @relation(fields: [lessonId], references: [id])

  attachments ClassAttachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id    String @id @default(uuid())
  title String
  url   String @db.Text

  tutorId String
  tutor   Tutor  @relation(fields: [tutorId], references: [id])

  classes ClassAttachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tutorId])
}

model ClassAttachment {
  id           String     @id @default(uuid())
  classId      String
  class        Class      @relation(fields: [classId], references: [id], onDelete: Cascade)
  attachmentId String
  attachment   Attachment @relation(fields: [attachmentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([classId, attachmentId])
}

// *
// * Lesson quiz
// *
model Quiz {
  id          String  @id @default(uuid())
  title       String
  description String?

  lessonId String @unique
  lesson   Lesson @relation(fields: [lessonId], references: [id])

  questions QuizQuestion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuizQuestion {
  id       String @id @default(uuid())
  question String

  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id])

  options QuizQuestionOption[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuizQuestionOption {
  id        String  @id @default(uuid())
  option    String
  isCorrect Boolean @default(false)

  quizQuestionId String
  question       QuizQuestion @relation(fields: [quizQuestionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// *
// * Student Progress
// *

model StudentProgress {
  id        String @id @default(uuid())
  studentId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, chapterId])
  @@index([chapterId])
}

// *
// * Course Enrollment Order
// *

enum EnrollmentOrderStatus {
  UNVERIFIED
  NEEDS_REVISION // El tutor solicitó cambios
  RESUBMITTED // El student reenvio
  COMPLETED
  CANCELED
}

model CourseEnrollmentOrder {
  id               String                @id @default(uuid())
  status           EnrollmentOrderStatus @default(UNVERIFIED)
  total            Float
  paymentMethod    PaymentMethod         @default(MOBILE_PAYMENT)
  paymentReference Int

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  courseEnrollment CourseEnrollment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId])
}

enum PaymentMethod {
  MOBILE_PAYMENT
}

// *
// * Course Enrollment 
// *

model CourseEnrollment {
  id             String  @id @default(uuid())
  isActive       Boolean @default(false)
  purchasedPrice Float

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  courseEnrollmentOrderId String                @unique
  courseEnrollmentOrder   CourseEnrollmentOrder @relation(fields: [courseEnrollmentOrderId], references: [id])

  enrolledAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([studentId, courseId])
  @@index([courseId])
  @@index([enrolledAt])
  @@index([studentId, isActive])
}

// *
// * Activity log
// * 

model ActivityLog {
  id     String @id @default(uuid())
  action String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// *
// * Notification
// * 

enum NotificationType {
  UPDATED_TUTOR_STATUS
  UPDATED_COURSE_REVIEW
}

model Notification {
  id     String           @id @default(uuid())
  type   NotificationType
  data   Json
  readAt DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
