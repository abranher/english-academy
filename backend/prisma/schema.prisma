// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users Models

model User {
  id              String        @id @default(uuid())
  role            Roles         @default(STUDENT)
  name            String
  secondName      String?
  lastName        String
  secondLastName  String?
  username        String        @unique
  email           String        @unique
  emailVerifiedAt DateTime?
  password        String
  birthdate       DateTime?
  avatarUrl       String?
  accountStatus   AccountStatus @default(ACTIVE)
  lastConnection  DateTime?
  secretToken     String?
  profileComplete Boolean       @default(false)

  countryId String?
  country   Country?  @relation(fields: [countryId], references: [id])
  student   Student[]
  tutor     Tutor[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([username, email])
}

model Student {
  id String @id @default(uuid())

  userId  String
  user    User   @relation(fields: [userId], references: [id])
  levelId String
  level   Level  @relation(fields: [levelId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tutor {
  id            String    @id @default(uuid())
  biography     String?
  approvedAt    DateTime?
  location      String
  curriculumUrl String

  certifications Certification[]
  userId         String
  user           User            @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Certification {
  id            String   @id @default(uuid())
  title         String
  certification String
  institution   String
  issueDate     DateTime
  language      String

  tutorId String
  tutor   Tutor  @relation(fields: [tutorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Country {
  id   String @id @default(uuid())
  name String
  code String @unique

  user User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// curriculum models

model Skill {
  id   String @id @default(uuid())
  name String @unique

  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo de Nivel
model Level {
  id          String @id @default(uuid())
  levelCode   String @unique
  title       String
  description String

  courses Course[]
  student Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo de Curso
model Course {
  id          String       @id @default(uuid())
  title       String
  description String?
  price       Float?
  imageUrl    String?
  status      CourseStatus

  levelId     String
  level       Level        @relation(fields: [levelId], references: [id])
  lessons     Lesson[]
  skillId     String?
  skill       Skill?       @relation(fields: [skillId], references: [id])
  attachments Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([skillId])
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

// Modelo de Lecci√≥n
model Lesson {
  id     String       @id @default(uuid())
  status LessonStatus

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Roles {
  ADMIN
  STUDENT
  TUTOR
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DELETED
}

enum LessonStatus {
  DRAFT
  PUBLISHED
  REVIEWED
  ARCHIVED
  DELETED
}
