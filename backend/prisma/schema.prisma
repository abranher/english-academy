// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// *
// * Users models
// *

model User {
  id              String        @id @default(uuid())
  role            Roles         @default(STUDENT)
  name            String?
  lastName        String?
  username        String?       @unique
  email           String        @unique
  emailVerifiedAt DateTime?
  password        String?
  birth           DateTime?
  avatarUrl       String?
  accountStatus   AccountStatus @default(ACTIVE)
  profileComplete Boolean       @default(false)

  countryId String?
  country   Country? @relation(fields: [countryId], references: [id])

  student Student?
  tutor   Tutor?

  activitylogs  ActivityLog[]
  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([username, email])
}

model Student {
  id            String    @id @default(uuid())
  bio           String?
  initialTestAt DateTime?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  levelId String?
  level   Level?  @relation(fields: [levelId], references: [id])

  purchases      Purchase[]
  purchaseOrders PurchaseOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tutor {
  id         String      @id @default(uuid())
  bio        String?
  cvUrl      String?
  status     TutorStatus @default(NEW)
  approvedAt DateTime?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  certifications     Certification[]
  tutorStatusHistory TutorStatusHistory[]
  attachments        Attachment[]
  courses            Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TutorStatusHistory {
  id             String              @id @default(uuid())
  comment        String
  previousStatus TutorStatus
  decision       TutorStatusDecision
  resubmittedAt  DateTime?

  tutorId String
  tutor   Tutor  @relation(fields: [tutorId], references: [id])

  createdAt DateTime @default(now())
}

model Certification {
  id                  String @id @default(uuid())
  name                String
  issuingOrganization String
  url                 String

  tutorId String
  tutor   Tutor  @relation(fields: [tutorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Country {
  id   String @id @default(uuid())
  name String
  code String @unique

  user User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// curriculum models

// *
// *
// * Level
// *
// *

model Level {
  id          String @id @default(uuid())
  levelCode   String @unique
  title       String
  description String

  courses Course[]
  student Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String @id @default(uuid())
  title       String
  description String

  subCategories SubCategory[]
  courses       Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubCategory {
  id          String @id @default(uuid())
  title       String
  description String

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Price {
  id     String @id @default(uuid())
  amount Float

  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// *
// *
// * Courses
// *
// *

model Course {
  id             String               @id @default(uuid())
  title          String               @db.Text
  subtitle       String?              @db.Text
  description    String?              @db.Text
  image          String?              @db.Text
  trailer        String?              @db.Text
  reviewStatus   CourseReviewStatus   @default(DRAFT)
  platformStatus CoursePlatformStatus @default(DRAFT)

  tutorId String
  tutor   Tutor  @relation(fields: [tutorId], references: [id])

  priceId String?
  price   Price?  @relation(fields: [priceId], references: [id])

  levelId String?
  level   Level?  @relation(fields: [levelId], references: [id])

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  subcategoryId String?
  subcategory   SubCategory? @relation(fields: [subcategoryId], references: [id])

  attachments Attachment[]
  chapters    Chapter[]
  purchases   Purchase[]
  reviews     CourseReview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id    String @id @default(uuid())
  title String
  url   String @db.Text

  tutorId String
  tutor   Tutor  @relation(fields: [tutorId], references: [id])

  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tutorId])
}

model CourseReview {
  id         String                @id @default(uuid())
  feedback   String?
  decision   CourseReviewDecision?
  reviewedAt DateTime?

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// *
// * Course chapter
// *

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  position    Int

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  lessons         Lesson[]
  studentProgress StudentProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

// *
// * Chapter lesson
// *

model Lesson {
  id       String     @id @default(uuid())
  type     LessonType
  position Int

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  class Class?
  quiz  Quiz?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// *
// * Lesson class
// *

model Class {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  video       String? @db.Text

  lessonId String @unique
  lesson   Lesson @relation(fields: [lessonId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// *
// * Lesson quiz
// *
model Quiz {
  id          String  @id @default(uuid())
  title       String
  description String?

  lessonId String @unique
  lesson   Lesson @relation(fields: [lessonId], references: [id])

  questions QuizQuestion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuizQuestion {
  id       String @id @default(uuid())
  question String

  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id])

  options QuizQuestionOption[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuizQuestionOption {
  id        String  @id @default(uuid())
  option    String
  isCorrect Boolean @default(false)

  quizQuestionId String
  question       QuizQuestion @relation(fields: [quizQuestionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// *
// * Student Progress
// *
model StudentProgress {
  id        String @id @default(uuid())
  studentId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, chapterId])
  @@index([chapterId])
}

// *
// * Purchase model
// *

model PurchaseOrder {
  id                String              @id @default(uuid())
  status            PurchaseOrderStatus @default(UNVERIFIED)
  total             Float
  payment_method    String              @default("MOBILE_PAYMENT")
  payment_reference Int

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId])
}

model Purchase {
  id String @id @default(uuid())

  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, courseId])
  @@index([courseId])
}

// *
// * activity log
// * 

model ActivityLog {
  id     String @id @default(uuid())
  action String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id     String           @id @default(uuid())
  type   NotificationType
  data   Json
  readAt DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// *
// * Enums
// *

enum Roles {
  ADMIN
  STUDENT
  TUTOR
}

enum TutorStatus {
  NEW
  PENDING
  RESUBMITTED
  APPROVED
  REJECTED
}

enum TutorStatusDecision {
  APPROVED
  NEEDS_CHANGES
  REJECTED
}

enum PurchaseOrderStatus {
  UNVERIFIED
  COMPLETED
  CANCELED
}

enum LessonType {
  CLASS
  QUIZ
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum CourseReviewStatus {
  DRAFT // El tutor est치 trabajando en el curso
  PENDING_REVIEW // El tutor envi칩 el curso para revisi칩n
  APPROVED // El administrador aprob칩 el curso
  NEEDS_REVISION // El administrador solicit칩 cambios
  REJECTED // El administrador rechaz칩 el curso
}

enum CoursePlatformStatus {
  DRAFT // El curso est치 en borrador (no visible)
  PUBLISHED // El curso est치 disponible para los estudiantes
  ARCHIVED // El curso ya no est치 activo pero se conserva
  DELETED // El curso fue eliminado (soft delete)
}

enum CourseReviewDecision {
  APPROVED // El curso fue aprobado
  NEEDS_CHANGES // El curso necesita cambios
  REJECTED // El curso fue rechazado
}

enum Language {
  ES
  EN
}

enum NotificationType {
  UPDATED_TUTOR_STATUS
  UPDATED_COURSE_REVIEW
}
