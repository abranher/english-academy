0001	Banco Central de Venezuela
0102	Banco de Venezuela S.A.C.A. Banco Universal	
0104	Venezolano de Crédito, S.A. Banco Universal	
0105	Mercantil Banco, C.A. Banco Universal	
0108	BBVA Provincial, S.A. Banco Universal	
0114	Bancaribe C.A. Banco Universal	
0115	Banco Exterior C.A. Banco Universal	
0128	Banco Caroní C.A. Banco Universal	
0134	Banesco, Banco Universal S.A.C.A.	
0137	Banco Sofitasa, Banco Universal	
0138	Banco Plaza, Banco Universal	
0146	Bangente C.A	
0151	BFC Banco Fondo Común C.A. Banco Universal	
0156	100% Banco, Banco Universal C.A.	
0157	DelSur Banco Universal C.A.	
0163	Banco del Tesoro, C.A. Banco Universal	
0166	Banco Agrícola de Venezuela, C.A. Banco Universal	
0168	Bancrecer, S.A. Banco Microfinanciero	
0169	R4, Banco Microfinanciero C.A.	
0171	Banco Activo, Banco Universal	
0172	Bancamiga, Banco Universal C.A.	
0173	Banco Internacional de Desarrollo, C.A. Banco Universal	
0174	Banplus Banco Universal, C.A	
0007	Banco Digital de Los Trabajadores	
0177	Banco de la Fuerza Armada Nacional Bolivariana, B.U.	
0178	N58 Banco Digital, S.A.	
0191	Banco Nacional de Crédito, C.A. Banco Universal	
0601	Instituto Municipal de Crédito Popular	

import { NextResponse } from "next/server";
import { auth } from "@/config/auth";
import { ADMIN, PUBLIC_ROUTES, ROOT, STUDENT, TUTOR } from "@/libs/routes";
import { Roles } from "@/types/enums/Roles";
import { TutorStatus } from "./types/enums";

export default auth((req) => {
  const { nextUrl } = req;
  const isAuthenticated = !!req.auth;
  const isPublicRoute = PUBLIC_ROUTES.includes(nextUrl.pathname);
  const role = req.auth?.user.role;
  const isEmailVerified = req.auth?.user.emailVerifiedAt;
  const initialTestTaken = req.auth?.user.student?.initialTestAt;

  if (!isAuthenticated && !isPublicRoute)
    return NextResponse.redirect(new URL(ROOT, req.nextUrl));

  if (isAuthenticated) {
    // Check email verification for all authenticated users
    // if (!isEmailVerified) {
    //  return NextResponse.redirect(new URL("/verify-email", req.nextUrl)); // Redirect to a verification page
    // }

    // Check tutor is approved
    if (role === Roles.TUTOR) {
      if (
        req.auth?.user.tutor?.status !== TutorStatus.APPROVED ||
        !req.auth?.user.tutor.approvedAt
      ) {
        if (nextUrl.pathname !== "/tutor/profile") {
          return NextResponse.redirect(new URL("/tutor/profile", req.nextUrl));
        }
      }

      // Check if the tutor has an active subscription
      const isCheckoutRoute = nextUrl.pathname.startsWith("/tutor/plans") && nextUrl.pathname.endsWith("/checkout");

      if (!req.auth?.user.tutor?.activeSubscription && !isCheckoutRoute) {
        if (nextUrl.pathname !== "/tutor/plans") {
          return NextResponse.redirect(new URL("/tutor/plans", req.nextUrl));
        }
      }
    }

    if (
      role === Roles.STUDENT &&
      !initialTestTaken &&
      !nextUrl.pathname.startsWith("/students/initial-test")
    ) {
      return NextResponse.redirect(
        new URL("/students/initial-test", req.nextUrl)
      );
    }

    //Now you can safely check the routes
    if (isPublicRoute && role === Roles.ADMIN) {
      return NextResponse.redirect(
        new URL(ADMIN.DEFAULT_REDIRECT, req.nextUrl)
      );
    }

    if (!(role === Roles.ADMIN) && ADMIN.ROUTES.includes(nextUrl.pathname)) {
      return NextResponse.json({ message: "Not Found" }, { status: 404 });
    }

    if (
      !(role === Roles.STUDENT) &&
      STUDENT.ROUTES.includes(nextUrl.pathname)
    ) {
      return NextResponse.json({ message: "Not Found" }, { status: 404 });
    }

    if (!(role === Roles.TUTOR) && TUTOR.ROUTES.includes(nextUrl.pathname)) {
      return NextResponse.json({ message: "Not Found" }, { status: 404 });
    }
  }
});

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico, sitemap.xml, robots.txt (metadata files)
     */
    "/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)",
  ],
};